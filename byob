#!/bin/sh

## Customisation ############

FAIL_COLOR='\033[31m'
MESSAGE_COLOR='\033[34;1m'  # bold blue
WHITE='\033[0m'
DEFAULT_OFFSET=1  # portion of the file to show

## Command line options #####

print_usage () {
  echo "usage: $0 [-I LIB_DIR1 -I LIB_DIR2 ...]"
}

ocaml_lib_dirs=". $(ocamlc -where)"

while getopts :I: option
do
  case "$option" in
    I) ocaml_lib_dirs="$ocaml_lib_dirs $OPTARG" ;;
    *) echo "Invalid option"; print_usage; exit 1 ;;
  esac
done

## Helper functions #########

# Parse one backtrace line
parse_line () {
  regex='^.*[Ff]ile "\([^"]*\)".*line \([0-9][0-9]*\).*characters \([0-9][0-9]*\)-\([0-9][0-9]*\).*$'
  info="$(echo "$1" | grep -q "$regex" \
    && echo "$1" | sed "s/$regex/\\1 \\2 \\3 \\4/" \
    2>/dev/null)"
}

# Search a file in the (known) OCaml library path
search_in_path () {
  for dir in $ocaml_lib_dirs; do
    if [ -e "$dir/$1" ]; then
      echo "$dir/$1"
      break
    fi
  done

  echo ""
}

## Core of the script #######

fancy_rendering () {
  filename="$(search_in_path "$1")"
  line_number="$2"
  b="$3"
  e="$4"
  offset=$DEFAULT_OFFSET
  start=$((line_number - offset))
  end=$((line_number + offset))

  if [ "$filename" != "" ]; then
    bat -H "$line_number" -n -r "$start:$end" "$filename"
  else
    echo "<file $1 not found>"
  fi
}

while read -r line; do
  if echo "$line" | grep -q '^Fatal error: exception [^F].*'; then
    error_name="$(echo "$line" | sed 's/Fatal error: exception \(.*\)$/\1/')"
    printf '%b** Fatal error: exception %b%s%b **%b\n' \
      "$MESSAGE_COLOR" \
      "$FAIL_COLOR" "$error_name" "$MESSAGE_COLOR" \
      "$WHITE"
    continue
  fi

  info='' # variable set by parse_line
          # yes I know, this is ugly
  if parse_line "$line"; then
    filename="$(echo "$info" | cut -d' ' -f1)"
    line_nb="$(echo "$info" | cut -d' ' -f2)"
    b="$(echo "$info" | cut -d' ' -f3)"
    e="$(echo "$info" | cut -d' ' -f4)"
    printf '%b%s%b\n' "$MESSAGE_COLOR" "$line" "$WHITE"
    fancy_rendering "$filename" "$line_nb" "$b" "$e"
    echo
  else
    echo "$line"
  fi
done

