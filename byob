#!/bin/sh

## Customisation ############

FAIL_COLOR='\033[31m'
MESSAGE_COLOR='\033[34;1m'  # bold blue
NUMBER_COLOR='\033[32m'
WHITE='\033[0m'
DEFAULT_OFFSET=1  # portion of the file to show

## Command line options #####

print_usage () {
  echo "usage: $0 [-I LIB_DIR1 -I LIB_DIR2 ...]"
}

ocaml_lib_dirs=". $(ocamlc -where)"

while getopts :I: option
do
  case "$option" in
    I) ocaml_lib_dirs="$ocaml_lib_dirs $OPTARG" ;;
    *) echo "Invalid option"; print_usage; exit 1 ;;
  esac
done

## Helper functions #########

# Parse one backtrace line
parse_line () {
  echo "$1" | sed 's/^.*file "\([^"]*\)".*line \([0-9][0-9]*\).*characters \([0-9][0-9]*\)-\([0-9][0-9]*\).*$/\1 \2 \3 \4/'
}

is_an_integer () {
  n="$1"
  [ "$((n))" = "$n" ]
}

parsing_was_successful () {
  is_an_integer "$2" && is_an_integer "$3" && is_an_integer "$4"
}

# Search a file in the (known) OCaml library path
search_in_path () {
  for dir in $ocaml_lib_dirs; do
    if [ -e "$dir/$1" ]; then
      echo "$dir/$1"
      break
    fi
  done

  echo ""
}

# Highlight a portion of a line in $FAIL_COLOR
highlight_slice () {
  hl_line="$1"
  start_hl="$2"
  end_hl="$3"

  if [ 0 != "$start_hl" ]; then
    printf '%s' "$(echo "$hl_line" | cut -c"1-$((start_hl))")"
  fi
  printf '%b%s%b' "$FAIL_COLOR" "$(echo "$hl_line" | cut -c"$((start_hl+1))-$end_hl")" "$WHITE"
  if [ "$end_hl" -lt "$((${#hl_line}))" ]; then
    printf '%s' "$(echo "$hl_line" | cut -c"$((end_hl + 1))-$((${#hl_line}))")"
  elif [ "$end_hl" -gt "$((${#hl_line}))" ]; then
    printf '%b%s%b' "$FAIL_COLOR" "â€¦" "$WHITE"
  fi
  printf '\n'
}

# Get one line of a file
# XXX. I think this is very inefficient
file_get_line () {
  tail -n+"$2" "$1" | head -n1
}

## Core of the script #######

fancy_rendering () {
  filename="$(search_in_path "$1")"
  line_number="$2"
  b="$3"
  e="$4"
  offset=$DEFAULT_OFFSET
  start=$((line_number - offset))
  end=$((line_number + offset))

  if [ "$filename" != "" ]; then
    for i in $(seq "$start" "$end"); do
      printf '%b%d%b:' "$NUMBER_COLOR" "$i" "$WHITE"
      line="$(file_get_line "$filename" "$i")"
      if [ "$i" = "$line_number" ]; then
        highlight_slice "$line" "$b" "$e"
      else
        echo "$line"
      fi
    done
  else
    echo "<file $1 not found>"
  fi
}

while read -r line; do
  if echo "$line" | grep -q '^Fatal error: exception'; then
    error_name="$(echo "$line" | sed 's/Fatal error: exception (\(.*\))$/\1/')"
    printf '%bFatal error: exception (%b%s%b)%b\n' \
      "$MESSAGE_COLOR" \
      "$FAIL_COLOR" "$error_name" "$MESSAGE_COLOR" \
      "$WHITE"
    continue
  fi

  info="$(parse_line "$line")"
  # Check if the parsing was successful
  if [ "$(echo "$info" | wc -w)" = 4 ]; then
    filename="$(echo "$info" | cut -d' ' -f1)"
    line_nb="$(echo "$info" | cut -d' ' -f2)"
    b="$(echo "$info" | cut -d' ' -f3)"
    e="$(echo "$info" | cut -d' ' -f4)"
    if parsing_was_successful "$filename" "$line_nb" "$b" "$e"; then
      printf '%b%s%b\n' "$MESSAGE_COLOR" "$line" "$WHITE"
      fancy_rendering "$filename" "$line_nb" "$b" "$e"
      echo
    else
      echo "$line"
    fi
  else
    echo "$line"
  fi
done

